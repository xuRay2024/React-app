HMR: hot module replacement

Building Components
-Building componments
-Rendering markup with JSX
-Managing state
-Passing input via props
-Debugging React apps

ctrl + d :多重选择，批量修改

function ListGroup() {
  let items = ["City A", "City B", "City C", "City D"];
  items = [];

  //   const getMessage = () => {
  //     items.length === 0 ? <p>No item found</p> : null;
  //   };
  return (
    <>
      <h1>List</h1>
      {/* {getMessage} */}
      {/* {items.length === 0 ? <p>No item found</p> : null} */}
      {items.length === 0 && <p>No item found</p>}
      <ul className='list-group'>
        {items.map((item) => (
          <li key={item}>{item}</li>
        ))}
      </ul>
    </>
  );
}

export default ListGroup;



import { MouseEvent } from "react";

function ListGroup() {
  let items = ["City A", "City B", "City C", "City D"];
  let selectedIndex = 0;

  // event handler
  const handleClick = (event: MouseEvent) => console.log(event);

  return (
    <>
      <h1>List</h1>
      {items.length === 0 && <p>No item found</p>}
      <ul className='list-group'>
        {items.map((item, index) => (
          <li
            className={
              selectedIndex === index
                ? "list-group-item active"
                : "list-group-item"
            }
            key={item}
            onClick={handleClick}>
            {item}
          </li>
        ))}
      </ul>
    </>
  );
}

export default ListGroup;



// Hook
  const arr = useState(-1);
  arr[0]// variable(selectedIndex)
  arr[1]// updater function

const [selectedIndex, setSelectedIndex] = useState(-1);


App.tsx(ListGroup)
import ListGroup from "./componments/ListGroup";

function App() {
  let items = ["City A", "City B", "City C", "City D"];

  const handleSelectItem = (item: string) => {
    console.log(item);
  };

  return (
    <div>
      <ListGroup
        items={items}
        heading='Cities'
        onSelectItem={handleSelectItem}
      />
    </div>
  );
}

export default App;


rafce

App.tsx(Button)
import Button from "./componments/Button";

function App() {
  return (
    <div>
      <Button onClick={() => console.log("Clicked")}>My Button</Button>
    </div>
  );
}

export default App;



import "bootstrap/dist/css/bootstrap.css";

return (
    <div>
      <Like onClick={() => console.log("Clicked")} />
    </div>
  );


const [isVisable, setVisibility] = useState(false);
  
  const handleClick = () => {
    setVisibility(true);
    console.log(isVisable);
  };

  return (
    <div>
      <button onClick={handleClick}>Show</button>
    </div>
  );


Choosing the State Structure
function App() {
  // const [firstName,setFirstName]=useState('');
  // const[lastName,setLastName]=useState('');
  const [person, setPerson] = useState({
    firstName: "",
    lastName: "",
  });

  const [isLoading, setLoading] = useState("false");

  return <div></div>;
}


Strict Mode
return (
    <div>
      <Message />
    </div>
  );


Update Objects
  const [drink, setDrink] = useState({
    title: "Sprite",
    price: 5,
  });

  const handleClick = () => {
    // const newDrink = {
    //   title: drink.title,
    //   price: 6,
    // };
    setDrink({ ...drink, price: 6 });
  };

  return (
    <div>
      {drink.price}
      <button onClick={handleClick}>Click Here</button>
    </div>
  );

Updating Nested Objects
  const [customer, setCustomer] = useState({
    name: "Ray",
    address: {
      city: "ABBA",
      zipCode: 95021,
    },
  });

  const handleClick = () => {
    setCustomer({
      ...customer,
      address: { ...customer.address, zipCode: 94112 },
    });
  };


Updating Arrays
  const [tags, setTags] = useState(["happy", "sad"]);

  const handleClick = () => {
    //Add
    setTags([...tags, "exciting"]);

    //Remove
    setTags(tags.filter((tag) => tag !== "happy"));

    //Update
    setTags(tags.map((tag) => (tag === "happy" ? "happiness" : tag)));
  };


Updating Array of Objects
  const [bugs, setBugs] = useState([
    { id: 1, title: "Bug 1", fixed: false },
    { id: 2, title: "Bug 2", fixed: false },
  ]);

  const handleClick = () => {
    //setBugs(bugs.map((bug) => (bug.id === 1 ? { ...bug, fixed: true } : bug)));
  };

    setBugs(
      produce((draft) => {
        const bug = draft.find((bug) => bug.id === 1);
        if (bug) bug.fixed = true;
      })
    );


Sharing State between Components
  const [cartItems, setCartItems] = useState(["Product1", "Product2"]);

  return (
    <div>
      <NavBar cartItemsCount={cartItems.length} />
      <Cart cartItems={cartItems} onClear={() => setCartItems([])} />
    </div>
  );



Exercise 3
function App() {
  const [cart, setCart] = useState({
    discount: 0.1,
    items: [
      { id: 1, title: "Product 1", quantity: 1 },
      { id: 2, title: "Product 2", quantity: 1 },
    ],
  });

  const handleClick = () => {
    setCart({
      ...cart,
      items: cart.items.map((item) =>
        item.id === 1 ? { ...item, quantity: item.quantity + 1 } : item
      ),
    });
  };

  return (
    <div>
      <button onClick={handleClick}>Click Here</button>
    </div>
  );
}


Exercise 1
function App() {
  const [game, setGame] = useState({
    id: 1,
    player: {
      name: "Ray",
    },
  });

  const handleClick = () => {
    setGame({ ...game, player: { ...game.player, name: "BOb" } });
  };

  return (
    <div>
      <button onClick={handleClick}>Click Here</button>
    </div>
  );
}


Exercise 2
const [pizza, SetPizza] = useState({
    name: "Spicy",
    toppings: ["Mushroom"],
  });

  const handleClick = () => {
    SetPizza({ ...pizza, toppings: [...pizza.toppings, "Cheese"] });
  };

  return (
    <div>
      <button onClick={handleClick}>Click Here</button>
    </div>
  );



Exercise 3
function App() {
  const [cart, setCart] = useState({
    discount: 0.1,
    items: [
      { id: 1, title: "Product 1", quantity: 1 },
      { id: 2, title: "Product 2", quantity: 1 },
    ],
  });

  const handleClick = () => {
    setCart({
      ...cart,
      items: cart.items.map((item) =>
        item.id === 1 ? { ...item, quantity: item.quantity + 1 } : item
      ),
    });
  };

  return (
    <div>
      <button onClick={handleClick}>Click Here</button>
    </div>
  );
}



Exercise 4
function App() {
  const handleClick = () => {};

  return (
    <div>
      <ExpandTexts>
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eaque,
        voluptatibus amet. Hic excepturi quidem ut voluptatem asperiores
        delectus soluta quam, autem, modi rem dolore! Nostrum id laborum labore
        doloremque itaque.
      </ExpandTexts>
    </div>
  );
}
