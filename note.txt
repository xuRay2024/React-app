HMR: hot module replacement

Building Components
-Building componments
-Rendering markup with JSX
-Managing state
-Passing input via props
-Debugging React apps

ctrl + d :多重选择，批量修改

function ListGroup() {
  let items = ["City A", "City B", "City C", "City D"];
  items = [];

  //   const getMessage = () => {
  //     items.length === 0 ? <p>No item found</p> : null;
  //   };
  return (
    <>
      <h1>List</h1>
      {/* {getMessage} */}
      {/* {items.length === 0 ? <p>No item found</p> : null} */}
      {items.length === 0 && <p>No item found</p>}
      <ul className='list-group'>
        {items.map((item) => (
          <li key={item}>{item}</li>
        ))}
      </ul>
    </>
  );
}

export default ListGroup;



import { MouseEvent } from "react";

function ListGroup() {
  let items = ["City A", "City B", "City C", "City D"];
  let selectedIndex = 0;

  // event handler
  const handleClick = (event: MouseEvent) => console.log(event);

  return (
    <>
      <h1>List</h1>
      {items.length === 0 && <p>No item found</p>}
      <ul className='list-group'>
        {items.map((item, index) => (
          <li
            className={
              selectedIndex === index
                ? "list-group-item active"
                : "list-group-item"
            }
            key={item}
            onClick={handleClick}>
            {item}
          </li>
        ))}
      </ul>
    </>
  );
}

export default ListGroup;



// Hook
  const arr = useState(-1);
  arr[0]// variable(selectedIndex)
  arr[1]// updater function

const [selectedIndex, setSelectedIndex] = useState(-1);


App.tsx(ListGroup)
import ListGroup from "./componments/ListGroup";

function App() {
  let items = ["City A", "City B", "City C", "City D"];

  const handleSelectItem = (item: string) => {
    console.log(item);
  };

  return (
    <div>
      <ListGroup
        items={items}
        heading='Cities'
        onSelectItem={handleSelectItem}
      />
    </div>
  );
}

export default App;


rafce

App.tsx(Button)
import Button from "./componments/Button";

function App() {
  return (
    <div>
      <Button onClick={() => console.log("Clicked")}>My Button</Button>
    </div>
  );
}

export default App;



import "bootstrap/dist/css/bootstrap.css";

return (
    <div>
      <Like onClick={() => console.log("Clicked")} />
    </div>
  );


const [isVisable, setVisibility] = useState(false);
  
  const handleClick = () => {
    setVisibility(true);
    console.log(isVisable);
  };

  return (
    <div>
      <button onClick={handleClick}>Show</button>
    </div>
  );


Choosing the State Structure
function App() {
  // const [firstName,setFirstName]=useState('');
  // const[lastName,setLastName]=useState('');
  const [person, setPerson] = useState({
    firstName: "",
    lastName: "",
  });

  const [isLoading, setLoading] = useState("false");

  return <div></div>;
}


Strict Mode
return (
    <div>
      <Message />
    </div>
  );


Update Objects
  const [drink, setDrink] = useState({
    title: "Sprite",
    price: 5,
  });

  const handleClick = () => {
    // const newDrink = {
    //   title: drink.title,
    //   price: 6,
    // };
    setDrink({ ...drink, price: 6 });
  };

  return (
    <div>
      {drink.price}
      <button onClick={handleClick}>Click Here</button>
    </div>
  );

Updating Nested Objects
  const [customer, setCustomer] = useState({
    name: "Ray",
    address: {
      city: "ABBA",
      zipCode: 95021,
    },
  });

  const handleClick = () => {
    setCustomer({
      ...customer,
      address: { ...customer.address, zipCode: 94112 },
    });
  };


Updating Arrays
  const [tags, setTags] = useState(["happy", "sad"]);

  const handleClick = () => {
    //Add
    setTags([...tags, "exciting"]);

    //Remove
    setTags(tags.filter((tag) => tag !== "happy"));

    //Update
    setTags(tags.map((tag) => (tag === "happy" ? "happiness" : tag)));
  };


Updating Array of Objects
  const [bugs, setBugs] = useState([
    { id: 1, title: "Bug 1", fixed: false },
    { id: 2, title: "Bug 2", fixed: false },
  ]);

  const handleClick = () => {
    //setBugs(bugs.map((bug) => (bug.id === 1 ? { ...bug, fixed: true } : bug)));
  };

    setBugs(
      produce((draft) => {
        const bug = draft.find((bug) => bug.id === 1);
        if (bug) bug.fixed = true;
      })
    );


Sharing State between Components
  const [cartItems, setCartItems] = useState(["Product1", "Product2"]);

  return (
    <div>
      <NavBar cartItemsCount={cartItems.length} />
      <Cart cartItems={cartItems} onClear={() => setCartItems([])} />
    </div>
  );



Exercise 3
function App() {
  const [cart, setCart] = useState({
    discount: 0.1,
    items: [
      { id: 1, title: "Product 1", quantity: 1 },
      { id: 2, title: "Product 2", quantity: 1 },
    ],
  });

  const handleClick = () => {
    setCart({
      ...cart,
      items: cart.items.map((item) =>
        item.id === 1 ? { ...item, quantity: item.quantity + 1 } : item
      ),
    });
  };

  return (
    <div>
      <button onClick={handleClick}>Click Here</button>
    </div>
  );
}


Exercise 1
function App() {
  const [game, setGame] = useState({
    id: 1,
    player: {
      name: "Ray",
    },
  });

  const handleClick = () => {
    setGame({ ...game, player: { ...game.player, name: "BOb" } });
  };

  return (
    <div>
      <button onClick={handleClick}>Click Here</button>
    </div>
  );
}


Exercise 2
const [pizza, SetPizza] = useState({
    name: "Spicy",
    toppings: ["Mushroom"],
  });

  const handleClick = () => {
    SetPizza({ ...pizza, toppings: [...pizza.toppings, "Cheese"] });
  };

  return (
    <div>
      <button onClick={handleClick}>Click Here</button>
    </div>
  );



Exercise 3
function App() {
  const [cart, setCart] = useState({
    discount: 0.1,
    items: [
      { id: 1, title: "Product 1", quantity: 1 },
      { id: 2, title: "Product 2", quantity: 1 },
    ],
  });

  const handleClick = () => {
    setCart({
      ...cart,
      items: cart.items.map((item) =>
        item.id === 1 ? { ...item, quantity: item.quantity + 1 } : item
      ),
    });
  };

  return (
    <div>
      <button onClick={handleClick}>Click Here</button>
    </div>
  );
}



Exercise 4
function App() {
  const handleClick = () => {};

  return (
    <div>
      <ExpandTexts>
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eaque,
        voluptatibus amet. Hic excepturi quidem ut voluptatem asperiores
        delectus soluta quam, autem, modi rem dolore! Nostrum id laborum labore
        doloremque itaque.
      </ExpandTexts>
    </div>
  );
}



div.mb-3>label.form-label+input.form-control


parseInt: string => number


Form.tsx RefHook
const Form = () => {
  const nameRef = useRef<HTMLInputElement>(null);
  const ageRef = useRef<HTMLInputElement>(null);
  const person = { name: "", age: 0 };

  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    if (nameRef.current !== null) person.name = nameRef.current.value;
    if (ageRef.current !== null) person.age = parseInt(ageRef.current.value);
    console.log(person);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className='mb-3'>
        <label htmlFor='name' className='form-label'>
          Name
        </label>
        <input ref={nameRef} id='name' type='text' className='form-control' />
      </div>
      <div className='mb-3'>
        <label htmlFor='age' className='form-label'>
          Age
        </label>
        <input ref={ageRef} id='age' type='number' className='form-control' />
      </div>
      <button className='btn btn-primary' type='submit'>
        Submit
      </button>
    </form>
  );
};

export default Form;


Form.tsx StateHook
import React, { FormEvent, useState } from "react";

const Form = () => {
  const [person, setPerson] = useState({
    name: "",
    age: "",
  });

  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    console.log(person);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className='mb-3'>
        <label htmlFor='name' className='form-label'>
          Name
        </label>
        <input
          onChange={(event) =>
            setPerson({ ...person, name: event.target.value })
          }
          value={person.name}
          id='name'
          type='text'
          className='form-control'
        />
      </div>
      <div className='mb-3'>
        <label htmlFor='age' className='form-label'>
          Age
        </label>
        <input
          onChange={(event) =>
            setPerson({ ...person, age: event.target.value })
          }
          value={person.age}
          id='age'
          type='number'
          className='form-control'
        />
      </div>
      <button className='btn btn-primary' type='submit'>
        Submit
      </button>
    </form>
  );
};

export default Form;


Form.tsx StateHook with React-Hook-Form
import { FieldValues, useForm } from "react-hook-form";

const Form = () => {
  const { register, handleSubmit } = useForm();

  const onSubmit = (data: FieldValues) => console.log(data);

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div className='mb-3'>
        <label htmlFor='name' className='form-label'>
          Name
        </label>
        <input
          {...register("name")}
          id='name'
          type='text'
          className='form-control'
        />
      </div>
      <div className='mb-3'>
        <label htmlFor='age' className='form-label'>
          Age
        </label>
        <input
          {...register("age")}
          id='age'
          type='number'
          className='form-control'
        />
      </div>
      <button className='btn btn-primary' type='submit'>
        Submit
      </button>
    </form>
  );
};

export default Form;



Applying Validation
import { FieldValues, useForm } from "react-hook-form";

interface FormData {
  name: string;
  age: number;
}

const Form = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>();

  const onSubmit = (data: FieldValues) => console.log(data);

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div className='mb-3'>
        <label htmlFor='name' className='form-label'>
          Name
        </label>
        <input
          {...register("name", { required: true, minLength: 3 })}
          id='name'
          type='text'
          className='form-control'
        />
        {errors.name?.type === "required" && (
          <p className='text-danger'>The name field is required</p>
        )}
        {errors.name?.type === "minLength" && (
          <p className='text-danger'>The name must be at least 3 charactors</p>
        )}
      </div>
      <div className='mb-3'>
        <label htmlFor='age' className='form-label'>
          Age
        </label>
        <input
          {...register("age", { required: true })}
          id='age'
          type='number'
          className='form-control'
        />
        {errors.age?.type === "required" && (
          <p className='text-danger'>The age field is required</p>
        )}
      </div>
      <button className='btn btn-primary' type='submit'>
        Submit
      </button>
    </form>
  );
};

export default Form;


import { FieldValues, useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const schema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  age: z
    .number({ invalid_type_error: "Age field is required" })
    .min(18, { message: "Age must be at least 18" }),
});

type FormData = z.infer<typeof schema>;

const Form = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm<FormData>({ resolver: zodResolver(schema) });

  const onSubmit = (data: FieldValues) => console.log(data);

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div className='mb-3'>
        <label htmlFor='name' className='form-label'>
          Name
        </label>
        <input
          {...register("name")}
          id='name'
          type='text'
          className='form-control'
        />
        {errors.name && <p className='text-danger'>{errors.name.message}</p>}
      </div>

      <div className='mb-3'>
        <label htmlFor='age' className='form-label'>
          Age
        </label>
        <input
          {...register("age", { valueAsNumber: true })}
          id='age'
          type='number'
          className='form-control'
        />
        {errors.age && <p className='text-danger'>{errors.age.message}</p>}
      </div>

      <button disabled={!isValid} className='btn btn-primary' type='submit'>
        Submit
      </button>
    </form>
  );
};

export default Form;




Building ExpenseList
function App() {
  const [expenses01, setExpenses] = useState([
    { id: 1, description: "aa", amount: 6, category: "Unknow" },
    { id: 2, description: "bb", amount: 7, category: "Unknow" },
    { id: 3, description: "cc", amount: 8, category: "Unknow" },
    { id: 4, description: "dd", amount: 9, category: "Unknow" },
  ]);

  return (
    <div>
      <ExpenseList
        expenses={expenses01}
        onDelete={(id) => setExpenses(expenses01.filter((e) => e.id !== id))}
      />
    </div>
  );
}

export default App;



CH6 Project Expense Tracker
function App() {
  const [selectedCategory, setSelectedCategory] = useState("");
  const [expenses01, setExpenses] = useState([
    { id: 1, description: "aa", amount: 6, category: "Unknown" },
    { id: 2, description: "bb", amount: 7, category: "Unknown" },
    { id: 3, description: "cc", amount: 8, category: "Unknown" },
    { id: 4, description: "dd", amount: 9, category: "Unknown" },
  ]);

  const visibleExpenses = selectedCategory
    ? expenses01.filter((e) => e.category === selectedCategory)
    : expenses01;

  return (
    <>
      <div>
        <div className='mb-5'>
          <ExpenseForm
            onSubmit={(newexpense) =>
              setExpenses([
                ...expenses01,
                { ...newexpense, id: expenses01.length + 1 },
              ])
            }
          />
        </div>
        <div className='mb-3'>
          <ExpenseFilter
            onSelectCategory={(category) => setSelectedCategory(category)}
          />
        </div>
        <ExpenseList
          expenses={visibleExpenses}
          onDelete={(id) => setExpenses(expenses01.filter((e) => e.id !== id))}
        />
      </div>
    </>
  );
}

export default App;


CH7-2 Effect Hook
function App() {
  const ref = useRef<HTMLInputElement>(null);

  //afterRender
  useEffect(() => {
    //Side effect
    if (ref.current) ref.current.focus();
  });

  useEffect(() => {
    document.title = "My App";
  });

  return (
    <div>
      <input ref={ref} type='text' className='from-control' />
    </div>
  );
}

export default App;


CH7-3 Effect Dependencies
function App() {
  const [category, setCategory] = useState("");

  return (
    <div>
      <select
        className='form-select'
        onChange={(event) => setCategory(event.target.value)}>
        <option value=''></option>
        <option value='Clothing'>Clothing</option>
        <option value='Household'>Household</option>
      </select>
      <ProductList category={category} />
    </div>
  );
}

export default App;


CH7-4 Effect ciean up
const connect = () => console.log("Connecting");
const disconnect = () => console.log("Disconnecting");

function App() {
  useEffect(() => {
    connect();

    return () => disconnect();
  });

  return <div></div>;
}

export default App;


CH7-5 Fetching Data
interface Persons {
  id: number;
  name: string;
}

function App() {
  const [person, setPersons] = useState<Persons[]>([]);

  useEffect(() => {
    axios
      .get<Persons[]>("https://jsonplaceholder.typicode.com/users")
      .then((res) => setPersons(res.data));
  }, []);

  return (
    <ul>
      {person.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}

export default App;


CH7-7 Handing Errors
interface Persons {
  id: number;
  name: string;
}

function App() {
  const [person, setPersons] = useState<Persons[]>([]);
  const [error, setError] = useState("");
  useEffect(() => {
    axios
      .get<Persons[]>("https://jsonplaceholder.typicode.com/users")
      .then((res) => setPersons(res.data))
      .catch((err) => setError(err.message));
  }, []);

  return (
    <>
      {error && <p className='text-danger'>{error}</p>}
      <ul>
        {person.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </>
  );
}

export default App;


CH7-8Working with Async and Await
interface Persons {
  id: number;
  name: string;
}

function App() {
  const [person, setPersons] = useState<Persons[]>([]);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchPersons = async () => {
      try {
        const res = await axios.get<Persons[]>(
          "https://jsonplaceholder.typicode.com/users"
        );
        setPersons(res.data);
      } catch (err) {
        setError((err as AxiosError).message);
      }
    };

    fetchPersons();

    //get -> await promise -> res/err
    // .then((res) => setPersons(res.data))
    // .catch((err) => setError(err.message));
  }, []);

  return (
    <>
      {error && <p className='text-danger'>{error}</p>}
      <ul>
        {person.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </>
  );
}

export default App;



CH7-9/10 Cancelling a Fetch Request / Showing a LOading Indicator
interface Persons {
  id: number;
  name: string;
}

function App() {
  const [person, setPersons] = useState<Persons[]>([]);
  const [error, setError] = useState("");
  const [isLoading, setLoading] = useState(false);

  useEffect(() => {
    const controller = new AbortController();

    axios
      .get<Persons[]>("https://jsonplaceholder.typicode.com/users", {
        signal: controller.signal,
      })
      .then((res) => {
        setPersons(res.data);
        setLoading(false);
      })
      .catch((err) => {
        if (err instanceof CanceledError) return;
        setError(err.message);
        setLoading(false);
      });

    // .finally(() => {
    //   setLoading(false);
    // });

    return () => controller.abort();
  }, []);

  return (
    <>
      {error && <p className='text-danger'>{error}</p>}
      {isLoading && <div className='spinner-border'></div>}
      <ul>
        {person.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </>
  );
}

export default App;



CH11-14
interface Persons {
  id: number;
  name: string;
}

function App() {
  const [person, setPersons] = useState<Persons[]>([]);
  const [error, setError] = useState("");
  const [isLoading, setLoading] = useState(false);

  useEffect(() => {
    const controller = new AbortController();

    apiClient
      .get<Persons[]>("/users", {
        signal: controller.signal,
      })
      .then((res) => {
        setPersons(res.data);
        setLoading(false);
      })
      .catch((err) => {
        if (err instanceof CanceledError) return;
        setError(err.message);
        setLoading(false);
      });

    // .finally(() => {
    //   setLoading(false);
    // });

    return () => controller.abort();
  }, []);

  const deleteUser = (user: Persons) => {
    const originalUsers = [...person];
    setPersons(person.filter((u) => u.id !== user.id));

    apiClient.delete("/users/" + user.id).catch((err) => {
      setError(err.message);
      setPersons(originalUsers);
    });
  };

  const addUser = () => {
    const originalUsers = [...person];
    const newUser = { id: 0, name: "Ray" };
    setPersons([newUser, ...person]);

    apiClient
      .post("/users", newUser)
      .then(({ data: savedUser }) => setPersons([savedUser, ...person]))
      .catch((err) => {
        setError(err.message);
        setPersons(originalUsers);
      });
  };

  const updateUsers = (user: Persons) => {
    const originalUsers = [...person];
    const updateUser = { ...user, name: user.name + "!" };
    setPersons(person.map((u) => (u.id === user.id ? updateUser : u)));

    apiClient.patch("/users/" + user.id, updateUser).catch((err) => {
      setError(err.message);
      setPersons(originalUsers);
    });
  };

  return (
    <>
      {error && <p className='text-danger'>{error}</p>}
      {isLoading && <div className='spinner-border'></div>}
      <button className='btn btn-primary mb-3' onClick={addUser}>
        Add
      </button>
      <ul className='list-group'>
        {person.map((user) => (
          <li
            key={user.id}
            className='list-group-item d-flex justify-content-between'>
            {user.name}
            <div>
              <button
                className='btn btn-outline-secondary mx-1'
                onClick={() => updateUsers(user)}>
                Update
              </button>
              <button
                className='btn btn-outline-danger'
                onClick={() => deleteUser(user)}>
                Delete
              </button>
            </div>
          </li>
        ))}
      </ul>
    </>
  );
}

export default App;